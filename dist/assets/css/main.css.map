{"version":3,"file":"assets/css/main.css","mappings":"AAEA,UAEI,YAGJ,KACI,aACA,sBACA,8BAGJ,cAEI,cAGJ,KACI,cAGJ,SACI,WC4QI,qCD1QJ,sBC8GA,0BDjHJ,SCoRQ,qBCtSR,6FACI,aAQJ,QAEI,sBCKI,UACI,mBADJ,OACI,mBADJ,4HACI,mBALJ,6DACI,cADJ,OACI,cAGJ,eACI,mBALJ,iFACI,cDOZ,UACI,yBDsQE,cALI,CC7PV,cACI,gCACA,gBDgQE,cALI,CCvPV,wBACI,8BD+PI,iCA5JJ,0BCpGJ,wBDuQQ,gBGrSR,UAEI,SACA,UAYJ,WACI,yBACA,+BAGJ,cACI,gBC1BJ,WACI,yBACA,8KAGA,gBACA,kBACA,kBAGJ,WACI,gCACA,8KAGA,gBACA,kBACA,kBAGJ,WACI,8BACA,8KAGA,gBACA,kBACA,kBCtBJ,QAEI,8BACA,mBACA,gBACA,kBAEA,mBACA,4CACA,sBACA,eACA,0CAEA,aAEI,eACA,WACA,mBAEA,iBACI,WACA,YAIR,eACI,gDAKY,uCACI,YC7BT,CDoCX,eACI,SACA,mBACA,eAGJ,cACI,SACA,eACA,iBACA,kBHeI,qCKlER,UL2DI,eKtDI,ECFZ,OACI,eACA,WAIA,2CAGJ,QAEI,8BACA,mBACA,eNkDQ,qCOnEZ,QP4DQ,aOvDA,EP8DI,qCQlEZ,KR2DQ,iBQtDA,CRsDA,KQtDA,CRsDA,MQtDA,CRsDA,UQtDA,CRsDA,YQtDA,CRsDA,+BQtDA,CRsDA,6BQtDA,CRsDA,eQtDA,CRsDA,gBQtDA,CRsDA,iCQtDA,CRsDA,yBQtDA,CRsDA,0BQtDA,ER6DI,qCQ9CR,QRuCI,qBQlCI,CRkCJ,sBQlCI,CRkCJ,kBQlCI,CRkCJ,QQlCI,ECxBR,WAEI,SACA,gBACA,UACA,SAEA,gBACI,0CAEA,kBACI,kDAsBZ,WACI,yBCnCR,eACI,aACA,kBAEA,mBACA,WACA,cACA,eAEA,oBACI,cACA,WACA,WACA,kBAEA,eACA,UAGJ,uBACI,WACA,kBACA,WACA,WACA,kBAEA,eACA,2BAGJ,sBACI,WACA,kBACA,WACA,WACA,kBAEA,eACA,0BAGJ,sBACI,eAEA,2BACI,UAGJ,8BACI,WACA,kBACA,WACA,WACA,kBAEA,yCAGJ,6BACI,WACA,kBACA,WACA,WACA,kBAEA,wCVCA,qCWnEZ,eX4DQ,YWvDA,ECLR,SACI,iBACA,cd+RI,iCA5JJ,0BcrIJ,SdwSQ,kBErOI,sCanEZ,Sb4DQ,cavDA,ECJR,SAEI,WACA,uBACA,mBhB4RI,8DA5JJ,0BgBpIJ,ShBuSQ,4BgBhSJ,eAEI,SdyDI,qCenEZ,Sf4DQ,qBevDA,Ef8DI,qCenEZ,Sf4DQ,mBe9CA,EfqDI,qCehDR,efyCI,qBepCI,CfoCJ,sBepCI,CfoCJ,kBepCI,CfoCJ,QepCI,ECvBZ,OAEI,eAKJ,QAEI,8BACA,mBACA,eACA,sBAEA,UACI,ShBmDI,qCiBnEZ,QjB4DQ,qBiBvDA,CjBuDA,sBiBvDA,CjBuDA,kBiBvDA,CjBuDA,QiBvDA,6N","sources":["webpack://cv/./src/assets/sass/common/base/_grid.scss","webpack://cv/./node_modules/rfs/scss.scss","webpack://cv/./src/assets/sass/common/_placeholders.scss","webpack://cv/./src/assets/sass/common/_mixins.scss","webpack://cv/./src/assets/sass/common/base/_reset.scss","webpack://cv/./src/assets/sass/common/base/_typography.scss","webpack://cv/./src/assets/sass/components/option/_option.scss","webpack://cv/./src/assets/sass/common/_variables.scss","webpack://cv/./src/assets/sass/components/logo/_media.scss","webpack://cv/./src/assets/sass/components/header/_header.scss","webpack://cv/./src/assets/sass/components/header/_media.scss","webpack://cv/./src/assets/sass/components/header/nav/_media.scss","webpack://cv/./src/assets/sass/components/header/nav/_nav.scss","webpack://cv/./src/assets/sass/components/header/burger/_burger.scss","webpack://cv/./src/assets/sass/components/header/burger/_media.scss","webpack://cv/./src/assets/sass/components/main/wrapper/_wrapper.scss","webpack://cv/./src/assets/sass/components/main/wrapper/_media.scss","webpack://cv/./src/assets/sass/components/main/options/_options.scss","webpack://cv/./src/assets/sass/components/main/options/_media.scss","webpack://cv/./src/assets/sass/components/footer/_footer.scss","webpack://cv/./src/assets/sass/components/footer/_media.scss"],"sourcesContent":["@use './../../../../../node_modules/rfs/scss' as rfs;\r\n\r\nhtml,\r\nbody {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n}\r\n\r\nheader,\r\nfooter {\r\n    flex: 0 0 auto;\r\n}\r\n\r\nmain {\r\n    flex: 1 0 auto;\r\n}\r\n\r\n.wrapper {\r\n    width: 100%;\r\n    @include rfs.padding(0 25px);\r\n    box-sizing: border-box;\r\n}","// stylelint-disable scss/dimension-no-non-numeric-values\n\n// SCSS RFS mixin\n//\n// Automated responsive values for font sizes, paddings, margins and much more\n//\n// Licensed under MIT (https://github.com/twbs/rfs/blob/main/LICENSE)\n\n// Configuration\n\n// Base value\n$rfs-base-value: 1.25rem !default;\n$rfs-unit: rem !default;\n\n@if $rfs-unit != rem and $rfs-unit != px {\n  @error \"`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.\";\n}\n\n// Breakpoint at where values start decreasing if screen width is smaller\n$rfs-breakpoint: 1200px !default;\n$rfs-breakpoint-unit: px !default;\n\n@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {\n  @error \"`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.\";\n}\n\n// Resize values based on screen height and width\n$rfs-two-dimensional: false !default;\n\n// Factor of decrease\n$rfs-factor: 10 !default;\n\n@if type-of($rfs-factor) != number or $rfs-factor <= 1 {\n  @error \"`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.\";\n}\n\n// Mode. Possibilities: \"min-media-query\", \"max-media-query\"\n$rfs-mode: min-media-query !default;\n\n// Generate enable or disable classes. Possibilities: false, \"enable\" or \"disable\"\n$rfs-class: false !default;\n\n// 1 rem = $rfs-rem-value px\n$rfs-rem-value: 16 !default;\n\n// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14\n$rfs-safari-iframe-resize-bug-fix: false !default;\n\n// Disable RFS by setting $enable-rfs to false\n$enable-rfs: true !default;\n\n// Cache $rfs-base-value unit\n$rfs-base-value-unit: unit($rfs-base-value);\n\n@function divide($dividend, $divisor, $precision: 10) {\n  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);\n  $dividend: abs($dividend);\n  $divisor: abs($divisor);\n  @if $dividend == 0 {\n    @return 0;\n  }\n  @if $divisor == 0 {\n    @error \"Cannot divide by 0\";\n  }\n  $remainder: $dividend;\n  $result: 0;\n  $factor: 10;\n  @while ($remainder > 0 and $precision >= 0) {\n    $quotient: 0;\n    @while ($remainder >= $divisor) {\n      $remainder: $remainder - $divisor;\n      $quotient: $quotient + 1;\n    }\n    $result: $result * 10 + $quotient;\n    $factor: $factor * .1;\n    $remainder: $remainder * 10;\n    $precision: $precision - 1;\n    @if ($precision < 0 and $remainder >= $divisor * 5) {\n      $result: $result + 1;\n    }\n  }\n  $result: $result * $factor * $sign;\n  $dividend-unit: unit($dividend);\n  $divisor-unit: unit($divisor);\n  $unit-map: (\n    \"px\": 1px,\n    \"rem\": 1rem,\n    \"em\": 1em,\n    \"%\": 1%\n  );\n  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {\n    $result: $result * map-get($unit-map, $dividend-unit);\n  }\n  @return $result;\n}\n\n// Remove px-unit from $rfs-base-value for calculations\n@if $rfs-base-value-unit == px {\n  $rfs-base-value: divide($rfs-base-value, $rfs-base-value * 0 + 1);\n}\n@else if $rfs-base-value-unit == rem {\n  $rfs-base-value: divide($rfs-base-value, divide($rfs-base-value * 0 + 1, $rfs-rem-value));\n}\n\n// Cache $rfs-breakpoint unit to prevent multiple calls\n$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);\n\n// Remove unit from $rfs-breakpoint for calculations\n@if $rfs-breakpoint-unit-cache == px {\n  $rfs-breakpoint: divide($rfs-breakpoint, $rfs-breakpoint * 0 + 1);\n}\n@else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == \"em\" {\n  $rfs-breakpoint: divide($rfs-breakpoint, divide($rfs-breakpoint * 0 + 1, $rfs-rem-value));\n}\n\n// Calculate the media query value\n$rfs-mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{divide($rfs-breakpoint, $rfs-rem-value)}#{$rfs-breakpoint-unit});\n$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);\n$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);\n\n// Internal mixin used to determine which media query needs to be used\n@mixin _rfs-media-query {\n  @if $rfs-two-dimensional {\n    @if $rfs-mode == max-media-query {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n    @else {\n      @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) and (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {\n        @content;\n      }\n    }\n  }\n  @else {\n    @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {\n      @content;\n    }\n  }\n}\n\n// Internal mixin that adds disable classes to the selector if needed.\n@mixin _rfs-rule {\n  @if $rfs-class == disable and $rfs-mode == max-media-query {\n    // Adding an extra class increases specificity, which prevents the media query to override the property\n    &,\n    .disable-rfs &,\n    &.disable-rfs {\n      @content;\n    }\n  }\n  @else if $rfs-class == enable and $rfs-mode == min-media-query {\n    .enable-rfs &,\n    &.enable-rfs {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Internal mixin that adds enable classes to the selector if needed.\n@mixin _rfs-media-query-rule {\n\n  @if $rfs-class == enable {\n    @if $rfs-mode == min-media-query {\n      @content;\n    }\n\n    @include _rfs-media-query () {\n      .enable-rfs &,\n      &.enable-rfs {\n        @content;\n      }\n    }\n  }\n  @else {\n    @if $rfs-class == disable and $rfs-mode == min-media-query {\n      .disable-rfs &,\n      &.disable-rfs {\n        @content;\n      }\n    }\n    @include _rfs-media-query () {\n      @content;\n    }\n  }\n}\n\n// Helper function to get the formatted non-responsive value\n@function rfs-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: \"\";\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + \" 0\";\n    }\n    @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      @if $unit == px {\n        // Convert to rem if needed\n        $val: $val + \" \" + if($rfs-unit == rem, #{divide($value, $value * 0 + $rfs-rem-value)}rem, $value);\n      }\n      @else if $unit == rem {\n        // Convert to px if needed\n        $val: $val + \" \" + if($rfs-unit == px, #{divide($value, $value * 0 + 1) * $rfs-rem-value}px, $value);\n      } @else {\n        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n        $val: $val + \" \" + $value;\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// Helper function to get the responsive value calculated by RFS\n@function rfs-fluid-value($values) {\n  // Convert to list\n  $values: if(type-of($values) != list, ($values,), $values);\n\n  $val: \"\";\n\n  // Loop over each value and calculate value\n  @each $value in $values {\n    @if $value == 0 {\n      $val: $val + \" 0\";\n    } @else {\n      // Cache $value unit\n      $unit: if(type-of($value) == \"number\", unit($value), false);\n\n      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value\n      @if not $unit or $unit != px and $unit != rem {\n        $val: $val + \" \" + $value;\n      } @else {\n        // Remove unit from $value for calculations\n        $value: divide($value, $value * 0 + if($unit == px, 1, divide(1, $rfs-rem-value)));\n\n        // Only add the media query if the value is greater than the minimum value\n        @if abs($value) <= $rfs-base-value or not $enable-rfs {\n          $val: $val + \" \" + if($rfs-unit == rem, #{divide($value, $rfs-rem-value)}rem, #{$value}px);\n        }\n        @else {\n          // Calculate the minimum value\n          $value-min: $rfs-base-value + divide(abs($value) - $rfs-base-value, $rfs-factor);\n\n          // Calculate difference between $value and the minimum value\n          $value-diff: abs($value) - $value-min;\n\n          // Base value formatting\n          $min-width: if($rfs-unit == rem, #{divide($value-min, $rfs-rem-value)}rem, #{$value-min}px);\n\n          // Use negative value if needed\n          $min-width: if($value < 0, -$min-width, $min-width);\n\n          // Use `vmin` if two-dimensional is enabled\n          $variable-unit: if($rfs-two-dimensional, vmin, vw);\n\n          // Calculate the variable width between 0 and $rfs-breakpoint\n          $variable-width: #{divide($value-diff * 100, $rfs-breakpoint)}#{$variable-unit};\n\n          // Return the calculated value\n          $val: $val + \" calc(\" + $min-width + if($value < 0, \" - \", \" + \") + $variable-width + \")\";\n        }\n      }\n    }\n  }\n\n  // Remove first space\n  @return unquote(str-slice($val, 2));\n}\n\n// RFS mixin\n@mixin rfs($values, $property: font-size) {\n  @if $values != null {\n    $val: rfs-value($values);\n    $fluid-val: rfs-fluid-value($values);\n\n    // Do not print the media query if responsive & non-responsive values are the same\n    @if $val == $fluid-val {\n      #{$property}: $val;\n    }\n    @else {\n      @include _rfs-rule () {\n        #{$property}: if($rfs-mode == max-media-query, $val, $fluid-val);\n\n        // Include safari iframe resize fix if needed\n        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);\n      }\n\n      @include _rfs-media-query-rule () {\n        #{$property}: if($rfs-mode == max-media-query, $fluid-val, $val);\n      }\n    }\n  }\n}\n\n// Shorthand helper mixins\n@mixin font-size($value) {\n  @include rfs($value);\n}\n\n@mixin padding($value) {\n  @include rfs($value, padding);\n}\n\n@mixin padding-top($value) {\n  @include rfs($value, padding-top);\n}\n\n@mixin padding-right($value) {\n  @include rfs($value, padding-right);\n}\n\n@mixin padding-bottom($value) {\n  @include rfs($value, padding-bottom);\n}\n\n@mixin padding-left($value) {\n  @include rfs($value, padding-left);\n}\n\n@mixin margin($value) {\n  @include rfs($value, margin);\n}\n\n@mixin margin-top($value) {\n  @include rfs($value, margin-top);\n}\n\n@mixin margin-right($value) {\n  @include rfs($value, margin-right);\n}\n\n@mixin margin-bottom($value) {\n  @include rfs($value, margin-bottom);\n}\n\n@mixin margin-left($value) {\n  @include rfs($value, margin-left);\n}\n","@use \"./mixins\" as m;\r\n@use \"~rfs/scss\" as rfs;\r\n// FLEX\r\n\r\n%flex {\r\n    display: flex;\r\n}\r\n\r\n%flex-row {\r\n    @extend %flex;\r\n    flex-direction: row;\r\n}\r\n\r\n%flex-col {\r\n    @extend %flex;\r\n    flex-direction: column;\r\n}\r\n\r\n// BG, COLOR, BORDER\r\n\r\n@include m.set_modifier_tag();\r\n\r\n// FONTS\r\n\r\n%montserrat-regular {\r\n    font-family: \"Montserrat\";\r\n    @include rfs.font-size(16px);\r\n}\r\n\r\n%montserrat-medium {\r\n    font-family: \"Montserrat-Medium\";\r\n    font-weight: 500;\r\n    @include rfs.font-size(16px);\r\n}\r\n\r\n%montserrat-bold {\r\n    font-family: \"Montserrat-Bold\";\r\n    @include rfs.font-size(32px);\r\n}\r\n","@use \"./variables\" as v;\r\n@import \"~rfs/scss\";\r\n\r\n// $maxWidth: 1280;\r\n$maxWidth: 1920;\r\n\r\n@mixin adaptiv-font($pcSize, $mobSize) {\r\n    $addSize: $pcSize - $mobSize;\r\n    $maxWidth: $maxWidth - 320;\r\n    font-size: calc(\r\n        #{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth})\r\n    );\r\n}\r\n\r\n@mixin set_modifier_tag() {\r\n    @each $name, $value in v.$colors {\r\n        %color--#{\"\" + $name} {\r\n            color: #{$value};\r\n        }\r\n\r\n        %background--#{\"\" + $name} {\r\n            background: #{$value};\r\n        }\r\n\r\n        %border--#{\"\" + $name} {\r\n            border-color: #{$value};\r\n        }\r\n    }\r\n}\r\n\r\n@mixin css_props_rfs($map) {\r\n    @each $key, $value in $map {\r\n        @if ($key == \"margin\") {\r\n            @include margin($value);\r\n        } @else if ($key == \"margin-top\") {\r\n            @include margin-top($value);\r\n        } @else if ($key == \"margin-right\") {\r\n            @include margin-right($value);\r\n        } @else if ($key == \"margin-bottom\") {\r\n            @include margin-bottom($value);\r\n        } @else if ($key == \"margin-left\") {\r\n            @include margin-left($value);\r\n        } @else if ($key == \"padding\") {\r\n            @include padding($value);\r\n        } @else if ($key == \"padding-top\") {\r\n            @include padding-top($value);\r\n        } @else if ($key == \"padding-right\") {\r\n            @include padding-right($value);\r\n        } @else if ($key == \"padding-bottom\") {\r\n            @include padding-bottom($value);\r\n        } @else if ($key == \"padding-left\") {\r\n            @include padding-left($value);\r\n        } @else if ($key == \"include-font\") {\r\n            @include font-size($value);\r\n        } @else {\r\n            #{$key}: $value;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin css_props($map) {\r\n    @each $key, $value in $map {\r\n        #{$key}: $value;\r\n    }\r\n}\r\n\r\n@mixin media($display, $options) {\r\n    @if (length($display) ==1) {\r\n        @each $disp-key, $disp-value in $display {\r\n            @media screen and (#{$disp-key}-width: #{$disp-value + 'px'}) {\r\n                @include css_props($options);\r\n            }\r\n        }\r\n    } @else {\r\n        $min-width: null;\r\n        $max-width: null;\r\n        $max-orient: null;\r\n\r\n        @each $disp-key, $disp-value in $display {\r\n            @if ($disp-key == \"min\") {\r\n                $min-width: (\r\n                    #{#{$disp-key}-width + \" : \" + $disp-value + \"px\"}\r\n                );\r\n            } @else if ($disp-key == \"max\") {\r\n                $max-width: (\r\n                    #{#{$disp-key}-width + \" : \" + $disp-value + \"px\"}\r\n                );\r\n            } @else if ($disp-key == \"orientation\") {\r\n                $max-orient: (#{#{$disp-key} + \" : \" + #{$disp-value} + \"\"});\r\n            }\r\n        }\r\n        @if (\r\n            $min-width != null and $max-width != null and $max-orient != null\r\n        ) {\r\n            @media screen and ($min-width) and ($max-width) and ($max-orient) {\r\n                @include css_props($options);\r\n            }\r\n        }\r\n        @if (\r\n            $min-width == null and $max-width != null and $max-orient != null\r\n        ) {\r\n            @media screen and ($max-width) and ($max-orient) {\r\n                @include css_props($options);\r\n            }\r\n        }\r\n        @if (\r\n            $min-width != null and $max-width == null and $max-orient != null\r\n        ) {\r\n            @media screen and ($min-width) and ($max-orient) {\r\n                @include css_props($options);\r\n            }\r\n        }\r\n        @if (\r\n            $min-width != null and $max-width != null and $max-orient == null\r\n        ) {\r\n            @media screen and ($min-width) and ($max-width) {\r\n                @include css_props($options);\r\n            }\r\n        }\r\n    }\r\n}\r\n","@use \"./../variables\" as v;\r\n@forward \"./../placeholders\";\r\n\r\n/* Works on Firefox */\r\n\r\nhtml,\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    @extend %montserrat-regular;\r\n    @extend %background--primary-gray;\r\n    @extend %color--secondary-black;\r\n}\r\n\r\n@for $i from 1 to 9 {\r\n    h#{$i} {\r\n        @extend %montserrat-bold;\r\n    }\r\n}\r\n\r\n.loading * {\r\n    transition: 0s !important;\r\n    transition-delay: 0s !important;\r\n}\r\n\r\n.scroll--lock {\r\n    overflow: hidden;\r\n}\r\n","@font-face {\r\n    font-family: \"Montserrat\";\r\n    src: url(\"../fonts/montserrat/Montserrat-Regular.woff2\") format(\"woff2\"),\r\n        url(\"../fonts/montserrat/Montserrat-Regular.ttf\") format(\"truetype\"),\r\n        url(\"../fonts/montserrat/Montserrat-Regular.woff\") format(\"woff\");\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    font-display: swap;\r\n}\r\n\r\n@font-face {\r\n    font-family: \"Montserrat-Medium\";\r\n    src: url(\"../fonts/montserrat/Montserrat-Medium.woff2\") format(\"woff2\"),\r\n        url(\"../fonts/montserrat/Montserrat-Medium.ttf\") format(\"truetype\"),\r\n        url(\"../fonts/montserrat/Montserrat-Medium.woff\") format(\"woff\");\r\n    font-weight: 500;\r\n    font-style: normal;\r\n    font-display: swap;\r\n}\r\n\r\n@font-face {\r\n    font-family: \"Montserrat-Bold\";\r\n    src: url(\"../fonts/montserrat/Montserrat-Bold.woff2\") format(\"woff2\"),\r\n        url(\"../fonts/montserrat/Montserrat-Bold.ttf\") format(\"truetype\"),\r\n        url(\"../fonts/montserrat/Montserrat-Bold.woff\") format(\"woff\");\r\n    font-weight: 700;\r\n    font-style: normal;\r\n    font-display: swap;\r\n}\r\n","@use \"./../../common/variables\" as v;\r\n@forward \"./../../common/placeholders\";\r\n\r\n@use \"~rfs/scss\" as rfs;\r\n\r\n.option {\r\n    @extend %flex-col;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    max-width: 352px;\r\n    padding: 48px 24px;\r\n    @extend %background--primary-white;\r\n    border-radius: 12px;\r\n    box-shadow: 0px 4px 30px 0px rgba(0, 0, 0, 0.15);\r\n    box-sizing: border-box;\r\n    cursor: pointer;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n    &__img {\r\n        @extend %flex;\r\n        max-width: 72px;\r\n        width: 100%;\r\n        margin-bottom: 32px;\r\n\r\n        svg {\r\n            width: 100%;\r\n            height: auto;\r\n        }\r\n    }\r\n\r\n    &--hover {\r\n        box-shadow: 0px 4px 30px 0px rgba(67, 116, 229, 0.4);\r\n\r\n        .option__img {\r\n            svg {\r\n                g {\r\n                    path {\r\n                        fill: v.$primary-blue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &__title {\r\n        margin: 0;\r\n        margin-bottom: 16px;\r\n        font-size: 32px;\r\n    }\r\n\r\n    &__text {\r\n        margin: 0;\r\n        font-size: 16px;\r\n        line-height: 148%;\r\n        text-align: center;\r\n    }\r\n}\r\n","// COLORS PALITE\r\n\r\n$primary-gray: #eeeeee;\r\n$secondary-gray: #303030;\r\n$primary-black: #000000;\r\n$secondary-black: #222222;\r\n$primary-white: #ffffff;\r\n$secondary-white: rgb(255, 255, 255, 0.9);\r\n$primary-blue: #4374e5;\r\n\r\n$colors: (\r\n    primary-gray: $primary-gray,\r\n    secondary-gray: $secondary-gray,\r\n    primary-black: $primary-black,\r\n    secondary-black: $secondary-black,\r\n    primary-white: $primary-white,\r\n    secondary-white: $secondary-white,\r\n    primary-blue: $primary-blue,\r\n);\r\n","@use \"./../../common/mixins\" as m;\r\n\r\n.logo {\r\n    img {\r\n        @include m.media(\r\n            (\r\n                max: 680,\r\n            ),\r\n            (\r\n                max-width: 127px,\r\n            )\r\n        );\r\n    }\r\n}\r\n","@use \"./../../common/variables\" as v;\r\n@use \"./../../common/mixins\" as m;\r\n@use \"~rfs/scss\" as rfs;\r\n\r\n@forward \"./../../common/placeholders\";\r\n\r\nheader {\r\n    position: fixed;\r\n    width: 100%;\r\n    @extend %montserrat-medium;\r\n    @extend %background--primary-white;\r\n    @extend %color--secondary-black;\r\n    box-shadow: 0px 4px 10px 2px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.header {\r\n    @extend %flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 14px 0;\r\n}\r\n","@use \"./../../common/mixins\" as m;\r\n\r\n.header {\r\n    @include m.media(\r\n        (\r\n            max: 680,\r\n        ),\r\n        (\r\n            padding: 8px 0,\r\n        )\r\n    );\r\n}\r\n","@use \"./../../../common/variables\" as v;\r\n@use \"./../../../common/mixins\" as m;\r\n\r\n.nav {\r\n    @include m.media(\r\n        (\r\n            max: 680,\r\n        ),\r\n        (\r\n            position: absolute,\r\n            top: 0,\r\n            left: 0,\r\n            width: 100%,\r\n            height: 100vh,\r\n            background: v.$secondary-white,\r\n            font-family: \"Montserrat-Bold\",\r\n            margin-top: 34px,\r\n            padding-top: 32px,\r\n            backdrop-filter: blur(5px),\r\n            transform: translateX(100%),\r\n        )\r\n    );\r\n\r\n    ul {\r\n        @include m.media(\r\n            (\r\n                max: 680,\r\n            ),\r\n            (\r\n                flex-direction: column,\r\n                justify-content: center,\r\n                align-items: center,\r\n                gap: 25px,\r\n            )\r\n        );\r\n    }\r\n}\r\n","@forward \"./../../../common/placeholders\";\r\n@forward \"./media\";\r\n\r\n.nav {\r\n    &__list {\r\n        @extend %flex;\r\n        gap: 32px;\r\n        list-style: none;\r\n        padding: 0;\r\n        margin: 0;\r\n\r\n        &-item {\r\n            -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n\r\n            a {\r\n                text-decoration: none;\r\n                @extend %color--secondary-black;\r\n\r\n                &:visited {\r\n                    @extend %color--secondary-black;\r\n                }\r\n            }\r\n\r\n            &--hover {\r\n                @extend %color--primary-blue;\r\n\r\n                a {\r\n                    @extend %color--primary-blue;\r\n\r\n                    &:visited {\r\n                        @extend %color--primary-blue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    &--open {\r\n        transform: translateX(0%);\r\n    }\r\n}\r\n","@use \"./../../../common/variables\" as v;\r\n@forward \"./../../../common/placeholders\";\r\n\r\n.header-burger {\r\n    display: none;\r\n    position: relative;\r\n    @extend %flex;\r\n    align-items: center;\r\n    width: 18px;\r\n    height: 13.5px;\r\n    transition: 0.3s;\r\n\r\n    span {\r\n        display: block;\r\n        width: 18px;\r\n        height: 2px;\r\n        border-radius: 1px;\r\n        @extend %background--primary-black;\r\n        transition: 0.3s;\r\n        opacity: 1;\r\n    }\r\n\r\n    &::before {\r\n        content: \"\";\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 2px;\r\n        border-radius: 1px;\r\n        @extend %background--primary-black;\r\n        transition: 0.3s;\r\n        transform: translateY(-4px);\r\n    }\r\n\r\n    &::after {\r\n        content: \"\";\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 2px;\r\n        border-radius: 1px;\r\n        @extend %background--primary-black;\r\n        transition: 0.3s;\r\n        transform: translateY(4px);\r\n    }\r\n\r\n    &--hover {\r\n        transition: 0.3s;\r\n\r\n        span {\r\n            opacity: 0;\r\n        }\r\n\r\n        &::before {\r\n            content: \"\";\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 2px;\r\n            border-radius: 1px;\r\n            @extend %background--primary-black;\r\n            transform: translateY(0px) rotate(-45deg);\r\n        }\r\n\r\n        &::after {\r\n            content: \"\";\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 2px;\r\n            border-radius: 1px;\r\n            @extend %background--primary-black;\r\n            transform: translateY(0px) rotate(45deg);\r\n        }\r\n    }\r\n}\r\n","@use \"./../../../common/mixins\" as m;\r\n\r\n.header-burger {\r\n    @include m.media(\r\n        (\r\n            max: 680,\r\n        ),\r\n        (\r\n            display: flex,\r\n        )\r\n    );\r\n}\r\n","@use \"~rfs/sass\" as rfs;\r\n\r\n.wrapper {\r\n    max-width: 1440px;\r\n    margin: 0 auto;\r\n    @include rfs.padding(0 120px);\r\n}\r\n","@use \"./../../../common/mixins\" as m;\r\n\r\n.wrapper {\r\n    @include m.media(\r\n        (\r\n            max: 1023,\r\n        ),\r\n        (\r\n            padding: 0 16px,\r\n        )\r\n    );\r\n}\r\n","@forward \"./../../../common/placeholders\";\r\n@use \"~rfs/scss\" as rfs;\r\n\r\n.options {\r\n    @extend %flex;\r\n    width: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @include rfs.padding(272px 0 193px);\r\n\r\n    &__list {\r\n        @extend %flex;\r\n        gap: 32px;\r\n    }\r\n}\r\n","@use \"./../../../common/mixins\" as m;\r\n\r\n.options {\r\n    @include m.media(\r\n        (\r\n            max: 768,\r\n        ),\r\n        (\r\n            padding: 324px 0 245px,\r\n        )\r\n    );\r\n\r\n    @include m.media(\r\n        (\r\n            max: 680,\r\n        ),\r\n        (\r\n            padding: 74px 0 52px,\r\n        )\r\n    );\r\n\r\n    &__list {\r\n        @include m.media(\r\n            (\r\n                max: 680,\r\n            ),\r\n            (\r\n                flex-direction: column,\r\n                justify-content: center,\r\n                align-items: center,\r\n                gap: 24px,\r\n            )\r\n        );\r\n    }\r\n}\r\n","@forward \"./../../common/placeholders\";\r\n@use \"~rfs/scss\" as rfs;\r\n\r\nfooter {\r\n    @extend %montserrat-medium;\r\n    font-size: 13px;\r\n    @extend %background--secondary-gray;\r\n    @extend %color--primary-white;\r\n}\r\n\r\n.footer {\r\n    @extend %flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 24px 0;\r\n    box-sizing: border-box;\r\n\r\n    p {\r\n        margin: 0;\r\n    }\r\n}\r\n","@use \"./../../common/mixins\" as m;\r\n\r\n.footer {\r\n    @include m.media(\r\n        (\r\n            max: 680,\r\n        ),\r\n        (\r\n            flex-direction: column,\r\n            justify-content: center,\r\n            align-items: center,\r\n            gap: 12px,\r\n        )\r\n    );\r\n}\r\n"],"names":[],"sourceRoot":""}